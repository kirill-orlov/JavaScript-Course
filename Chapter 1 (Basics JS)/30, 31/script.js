// Метод trim()
"use strict";
let d = "   d   ";
console.log(d.trim());

// Test Callback
function first() {
    // Do something
    setTimeout(function () {
        console.log(1);
    }, 500); // Задержка выполнения
}

function second() {
    console.log(2);
}

// Если функции в коде идут одни за другими, это не значит что они выполняются по порядку.
first();
second();

//Callback - функция, которая должна быть выполнена после того как другая функция завершила своё выполнение
function learnJS(lang, callback) {
    console.log(`Я учу: ${lang}`);
    callback();
}

function done() {
    console.log("Я прошёл этот урок!");
}

learnJS('JavaScript', function () {
    // This is all a argument. 2 аргумент - это анонимная функция. Но можно передать и обычную, об этом ниже
    console.log("Я прошёл этот урок!");
});
//или
learnJS('JS', done); //Передать, но не выполнить/вызвать. Поэтому без круглых скобок ()

// Область применения: все также, взаимодействия с сервером, с пользователем. Например,
// выполнить такую-то функцию только тогда, когда пользователь Click'нет на кнопку.

// Калбэки позволяют нам быть уверенными, в том, что определенный код не начнет свое исполнение,
// пока другой код не завершит своё исполнение
